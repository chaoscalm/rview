/*
 * Copyright (C) 2017 Jorge Ruesga
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply from: "${rootDir}/flavors.gradle"

def libraries = rootProject.ext.libraries

dependencies {
    api "com.google.android.material:material:${libraries.material}"
    api "com.google.code.gson:gson:${libraries.gson}"
    api("com.squareup.retrofit2:retrofit:${libraries.retrofit2}") {
        exclude group: 'io.reactivex', module: 'rxjava'
    }
    api "com.squareup.retrofit2:converter-gson:${libraries.retrofit2}"
    api "com.squareup.retrofit2:adapter-rxjava2:${libraries.retrofit2}"
    api "com.squareup.okhttp3:okhttp:4.11.0"
    api "com.squareup.okhttp3:logging-interceptor:4.11.0"
    api "com.squareup.okio:okio:${libraries.okio}"
    api "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"
    api "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    api "com.github.jruesga:rxloader:${libraries.rxloader2}"
    gmsApi "com.google.android.gms:play-services-auth:${libraries.play_services_auth}"
}

android {
    defaultConfig {
        consumerProguardFiles file('proguard-consumer.txt')
        vectorDrawables.useSupportLibrary = true
        return void
    }

    namespace "com.ruesga.rview.attachments"
    flavorDimensions("privacy")
    productFlavors {
        gms {
            dimension "privacy"
            if (project.file('auth.properties').exists()) {
                Properties authProps = new Properties()
                authProps.load(new FileInputStream(project.file('auth.properties')))

                resValue "string", "gdrive.client_id", authProps["gdrive.client_id"]
                resValue "string", "gdrive.client_secret", authProps["gdrive.client_secret"]
            } else {
                resValue "string", "gdrive.client_id", ""
                resValue "string", "gdrive.client_secret", ""
            }
        }
        floss {
            dimension "privacy"
            resValue "string", "gdrive.client_id", ""
            resValue "string", "gdrive.client_secret", ""
        }
    }

    dataBinding {
        enabled = true
    }
}
